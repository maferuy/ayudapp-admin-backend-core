basePath: /api/
definitions:
  handlers.loginUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  handlers.loginUserResponse:
    properties:
      access_token:
        type: string
      access_token_expires_at:
        type: string
      refresh_token:
        type: string
      refresh_token_expires_at:
        type: string
      session_id:
        type: string
      user:
        $ref: '#/definitions/handlers.userResponse'
    type: object
  handlers.userResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password_changed_at:
        type: string
      profile_image:
        type: string
    type: object
  models.Appointment:
    properties:
      address:
        type: string
      createdAt:
        type: string
      createdBy:
        type: string
      date:
        type: string
      duration:
        type: integer
      helper:
        type: string
      id:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  models.Category:
    properties:
      _id:
        type: string
      description:
        type: string
      name:
        type: string
    type: object
  models.User:
    properties:
      _id:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      password_changed_at:
        type: string
      profile_image:
        type: string
      status:
        type: string
      type:
        type: string
      updated_at:
        type: string
    type: object
  services.ChangePasswordRequest:
    properties:
      password:
        type: string
      password_confirmation:
        type: string
    type: object
  services.CreateAppointmentRequest:
    properties:
      address:
        type: string
      created_by:
        type: string
      date:
        type: string
      duration:
        type: integer
      helper:
        type: string
      status:
        type: string
    type: object
  services.CreateAppointmentResponse:
    properties:
      appointment_id:
        type: string
    type: object
  services.CreateCategoryResponse:
    properties:
      category_id:
        type: string
    type: object
  services.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      profile_image:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  services.CreateUserResponse:
    properties:
      user_id:
        type: string
    type: object
  services.GetAppointmentResponse:
    properties:
      appointment:
        $ref: '#/definitions/models.Appointment'
    type: object
  services.GetAppointmentsResponse:
    properties:
      appointments:
        items:
          $ref: '#/definitions/models.Appointment'
        type: array
    type: object
  services.GetCategoriesResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.Category'
        type: array
    type: object
  services.GetCategoryResponse:
    properties:
      category:
        $ref: '#/definitions/models.Category'
    type: object
  services.GetUserResponse:
    properties:
      user:
        $ref: '#/definitions/models.User'
    type: object
  services.GetUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  services.UpdateAppointmentRequest:
    properties:
      address:
        type: string
      created_by:
        type: string
      date:
        type: string
      duration:
        type: integer
      helper:
        type: string
      status:
        type: string
    type: object
  services.UpdateAppointmentResponse:
    properties:
      appointment:
        $ref: '#/definitions/models.Appointment'
    type: object
  services.UpdateCategoryResponse:
    properties:
      category:
        $ref: '#/definitions/models.Category'
    type: object
  services.UpdateUserRequest:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      profile_image:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  services.UpdateUserResponse:
    properties:
      user:
        $ref: '#/definitions/models.User'
    type: object
host: localhost:8080
info:
  contact:
    email: maramal@outlook.com
    name: Martin Fernandez
    url: https://mafer.dev
  description: API para administradores de Ayud App
  title: API de Administración de Ayud App
  version: "1.0"
paths:
  /admin/appointments:
    get:
      operationId: get-appointments
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GetAppointmentsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.GetAppointmentsResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtiene todos las citas
    post:
      consumes:
      - application/json
      operationId: create-appointment
      parameters:
      - description: Datos de la cita
        in: body
        name: CreateAppointmentRequest
        required: true
        schema:
          $ref: '#/definitions/services.CreateAppointmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.CreateAppointmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.CreateAppointmentResponse'
      security:
      - ApiKeyAuth: []
      summary: Crea una cita
  /admin/appointments/{id}:
    delete:
      operationId: delete-appointment
      parameters:
      - description: ID de la cita
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Elimina una cita
    get:
      operationId: get-appointment
      parameters:
      - description: ID de la cita
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GetAppointmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.GetAppointmentResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtiene una cita
    put:
      consumes:
      - application/json
      operationId: update-appointment
      parameters:
      - description: ID de la cita
        in: path
        name: id
        required: true
        type: integer
      - description: Datos de la cita
        in: body
        name: UpdateAppointmentRequest
        required: true
        schema:
          $ref: '#/definitions/services.UpdateAppointmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UpdateAppointmentResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.UpdateAppointmentResponse'
      security:
      - ApiKeyAuth: []
      summary: Actualiza una cita
  /admin/categories:
    get:
      operationId: get-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GetCategoriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.GetCategoriesResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtiene las categorías
    post:
      operationId: create-category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.CreateCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.CreateCategoryResponse'
      security:
      - ApiKeyAuth: []
      summary: Crea una categoría
  /admin/categories/{id}:
    delete:
      operationId: delete-category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Elimina una categoría
    get:
      operationId: get-category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GetCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.GetCategoryResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtiene una categoría por su ID
    put:
      operationId: update-category
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UpdateCategoryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.UpdateCategoryResponse'
      security:
      - ApiKeyAuth: []
      summary: Actualiza una categoría
  /admin/users:
    get:
      operationId: get-users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GetUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.GetUsersResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtiene todos los usuarios
    post:
      consumes:
      - application/json
      operationId: create-user
      parameters:
      - description: Datos del usuario
        in: body
        name: CreateUserRequest
        required: true
        schema:
          $ref: '#/definitions/services.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.CreateUserResponse'
      security:
      - ApiKeyAuth: []
      summary: Crea un usuario
  /admin/users/{id}:
    delete:
      operationId: delete-user
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Elimina un usuario
    get:
      operationId: get-user
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.GetUserResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtiene un usuario
    put:
      consumes:
      - application/json
      operationId: update-user
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      - description: Datos del usuario
        in: body
        name: UpdateUserRequest
        required: true
        schema:
          $ref: '#/definitions/services.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.UpdateUserResponse'
      security:
      - ApiKeyAuth: []
      summary: Actualiza un usuario
  /admin/users/{id}/password:
    put:
      consumes:
      - application/json
      operationId: change-password
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      - description: Datos del usuario
        in: body
        name: ChangePasswordRequest
        required: true
        schema:
          $ref: '#/definitions/services.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Cambia la contraseña de un usuario
  /admin/users/{id}/set-super-admin:
    post:
      operationId: set-super-admin
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Configura un usuario como super administrador
  /admin/users/{id}/unset-super-admin:
    post:
      operationId: unset-super-admin
      parameters:
      - description: ID del usuario
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Configura un super administrador como usuario
  /admin/users/email/{email}:
    get:
      operationId: get-user-by-email
      parameters:
      - description: Correo electrónico del usuario
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/services.GetUserResponse'
      security:
      - ApiKeyAuth: []
      summary: Obtiene un usuario por su correo electrónico
  /login:
    post:
      consumes:
      - application/json
      operationId: login-user
      parameters:
      - description: Datos del usuario
        in: body
        name: loginUserRequest
        required: true
        schema:
          $ref: '#/definitions/handlers.loginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Respuesta del login
          schema:
            $ref: '#/definitions/handlers.loginUserResponse'
        "400":
          description: Error en la solicitud
          schema:
            $ref: '#/definitions/handlers.loginUserResponse'
      summary: Ingresa un usuario
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
